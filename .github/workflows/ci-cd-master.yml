name: CI/CD master

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  IMAGE_API: doctorinna-api
  IMAGE_NGINX: doctorinna-nginx
  REGISTRY: aldanis

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Compose .env file
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: True
          envkey_POSTGRES_DB: ${{ secrets.DB_NAME }}
          envkey_POSTGRES_USER: ${{ secrets.DB_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_POSTGRES_HOST: database
          envkey_BROKER_HOST: rabbitmq
          envkey_ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          envkey_ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          envkey_ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          directory: .
          file_name: .env
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8
      - name: Run Postgre SQL container
        run: |
          docker-compose -f database.yml up -d
          sleep 5
      - name: Make migrations
        run: |
          python ./backend/manage.py makemigrations
          python ./backend/manage.py migrate
      - name: Coverage report
        run: |
          pip install coverage
          coverage run ./backend/manage.py test risk_factors
          coverage report
      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Run tests
        run: |
          python ./backend/manage.py test risk_factors

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [ continuous-integration ]
    if: github.event_name == 'push'
    steps:
      - name: Debug
        run: echo ${{ github.ref }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Compose .env file
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: True
          envkey_POSTGRES_DB: ${{ secrets.DB_NAME }}
          envkey_POSTGRES_USER: ${{ secrets.DB_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_POSTGRES_HOST: ${{ secrets.DB_HOST }}
          envkey_BROKER_HOST: ${{ secrets.BROKER_HOST }}
          envkey_ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          envkey_ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          envkey_ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          directory: .
          file_name: .env
      - name: Docker login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build Docker API image
        run: |
          docker build . -t ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:${{ github.sha }}
      - name: Build Docker NGINX image
        run: |
          docker build ./nginx/ -t ${{ env.REGISTRY }}/${{ env.IMAGE_NGINX }}:${{ github.sha }}
      - name: Publish Docker API image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:latest
      - name: Publish Docker NGINX image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NGINX }}:${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NGINX }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NGINX }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NGINX }}:latest
      - name: Compose YML file with container specific variables
        run: |
          cd ansible/
          echo "REGISTRY_USER:     ${{ secrets.REGISTRY_USER }}" >> vars.yml
          echo "REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}" >> vars.yml
          echo "REGISTRY:          ${{ secrets.REGISTRY }}" >> vars.yml
          echo "DB_NAME:           ${{ secrets.DB_NAME }}" >> vars.yml
          echo "DB_USER:           ${{ secrets.DB_USER }}" >> vars.yml
          echo "DB_PASSWORD:       ${{ secrets.DB_PASSWORD }}" >> vars.yml
          echo "SECRET_KEY:        ${{ secrets.SECRET_KEY }}" >> vars.yml
          echo "DEBUG:             ${{ secrets.DEBUG }} | quote" >> vars.yml
          echo "DB_HOST:           ${{ secrets.DB_HOST }}" >> vars.yml
          echo "BROKER_HOST:       ${{ secrets.BROKER_HOST }}" >> vars.yml
          echo "ADMIN_USERNAME:    ${{ secrets.ADMIN_USERNAME }}" >> vars.yml
          echo "ADMIN_EMAIL:       ${{ secrets.ADMIN_EMAIL }}" >> vars.yml
          echo "ADMIN_PASSWORD:    ${{ secrets.ADMIN_PASSWORD }}" >> vars.yml
      - name: Compose directory with host specific variables
        run: |
          cd ansible/
          mkdir group_vars
          echo "ansible_user:      ${{ secrets.PUBLIC_SERVER_USER }}" >> group_vars/local.yml
          echo "ansible_sudo_pass: ${{ secrets.PUBLIC_SERVER_SUDO_PASS }}" >> group_vars/local.yml
          echo "ansible_user:             ${{ secrets.PRIVATE_SERVERS_USER }}" >> group_vars/remote.yml
          echo "ansible_private_key_file: ${{ secrets.PRIVATE_SERVERS_SSH_KEY_FILE }}" >> group_vars/remote.yml
      - name: Transfer ansible directory
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUBLIC_SERVER_IP }}
          username: ${{ secrets.PUBLIC_SERVER_USER }}
          key: ${{ secrets.PUBLIC_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.PUBLIC_SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.PUBLIC_SERVER_SSH_PORT }}
          source: "ansible/"
          target: "/home/${{ secrets.PUBLIC_SERVER_USER }}/"
      - name: Run ansible playbook
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_SERVER_IP }}
          username: ${{ secrets.PUBLIC_SERVER_USER }}
          key: ${{ secrets.PUBLIC_SERVER_SSH_KEY }}
          passphrase: ${{ secrets.PUBLIC_SERVER_SSH_PASSPHRASE }}
          port: ${{ secrets.PUBLIC_SERVER_SSH_PORT }}
          script: |
            cd ansible/
            source venv/bin/activate
            ansible-playbook playbook.yml --extra-vars "@vars.yml"
